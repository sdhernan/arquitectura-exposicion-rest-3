name: pipelineDevJ11
# on:
#   workflow_dispatch:
# #Se usa workflow_dispatch cuando se quiere ejecutar por separado el pipeline (sin aprobaciones)

on:
  pull_request:
     branches:
       - develop
     types:
       - closed
 #Se usaría este bloque cuando se necesitan las aprobaciones y se inicia un Pull Request para juntar cambios


jobs:
  

  approval:
    runs-on: ubuntu-latest
    steps:
    - name: Check if PR is merged and approved
      id: check_approval
      run: |
          echo "Checking if PR is merged and approved..."
          if [[ ${{ github.event_name }} == 'pull_request' && ${{ github.event.pull_request.merged }} == true && ${{ github.event.pull_request.base.ref }} == 'develop' ]]; then
            echo "Pull request ha sido aprobado.. continuará el flujo de despliegue hacia el ambiente de Desarrollo."
            echo "approved=true" >> $GITHUB_OUTPUT
            echo "approved=true" >> $GITHUB_ENV
          else
            echo "Pull Request no ha sido aprobado. Contacte al Lider de Desarrollo"
            echo "approved=false" >> $GITHUB_OUTPUT
            echo "approved=false" >> $GITHUB_ENV
          fi

  build:
    runs-on: ubuntu-latest
    needs: approval 

    outputs:
         GROUP_OUT: ${{ steps.var_setup.outputs.GROUP_ID }}
         ARTIFACT_OUT: ${{ steps.var_setup.outputs.ARTIFACT_ID }}
         VERSION_OUT: ${{ steps.var_setup.outputs.VERSION }}
         NAME_OUT: ${{ steps.var_setup.outputs.NAME_ID }}
         BRANCH_OUT: ${{ steps.var_setup.outputs.BRANCH_NAME }}
         REPOSITORY_OUT: ${{ steps.var_setup.outputs.REPOSITORY_NAME }}
         
    strategy:
      matrix:
        java-version: ['11']  # Definimos una matriz con las versiones de Java ['8', '11']
        maven-version : ['3.5'] # Definimos una matriz con las versiones de Maven ['3.5', '3.8.1']

    steps:
    
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11.0.19'
          distribution: 'adopt'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: read_pom_xml
        id: var_setup
        run: |
          # USE GREP TO EXTRACT THE LINE WE NEED. SELECT SECOND OCCURENCE WITH SED. THEN CLEAN HTML TAGS WITH SED
          MY_GROUP_ID_LOCAL=$(grep -m2 "<groupId>" ./pom.xml | sed -n 2p | sed 's/^.<groupId>//' | sed 's/<\/groupId>.$//')
          MY_ARTIFACT_ID_PRE=$(grep -m2 "<artifactId>" ./pom.xml |  sed -n 2p | sed 's/^.<artifactId>//' | sed 's/<\/artifactId>.$//')
          VERSION_LOCAL=$(grep -m2 "<version>" ./pom.xml |  sed -n 2p | sed 's/^.<version>//' | sed 's/<\/version>.$//')
          MY_ARTIFACT_ID_LOCAL="${MY_ARTIFACT_ID_PRE}-exposicion"
          NAME_LOCAL="${MY_ARTIFACT_ID_LOCAL}-${VERSION_LOCAL}.war"
          REPOSITORY_NAME=$(echo "${GITHUB_REPOSITORY}" | sed 's/.*\///')
          
          #se utilizaria cuando haga el pull request approval exclusivamente, caso contrario, debe estar en comentario
          #BRANCH_LOCAL=$(echo "${{ github.event.pull_request.head.ref }}")  
          
          #se utiliza github_ref_name en ejecucion con workflow_dispatch, no usar en build y deploy con pull request
          BRANCH_LOCAL=$(echo "${GITHUB_REF_NAME}")  
          
          echo "MyGroupID=$MY_GROUP_ID_LOCAL and more"
          echo "MyArtifactID=$MY_ARTIFACT_ID_LOCAL and more"
          echo "Version=$VERSION_LOCAL and more"
          echo "MyName = $NAME_LOCAL"
          echo "Branch = $BRANCH_LOCAL"
          echo "RepositoryName = $REPOSITORY_NAME"
          
          # SET VARIABLES TO GITHUB_ENVIRONMENT AND OUTPUT
          echo "GROUP_ID=$(echo $MY_GROUP_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "GROUP_ID=$(echo $MY_GROUP_ID_LOCAL)" >> $GITHUB_ENV
          echo "ARTIFACT_ID=$(echo $MY_ARTIFACT_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "ARTIFACT_ID=$(echo $MY_ARTIFACT_ID_LOCAL)" >> $GITHUB_ENV
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_OUTPUT
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_ENV
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_OUTPUT
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_OUTPUT
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_ENV

      - name: Download settings.xml
        run: |
            mkdir -p ~/.m2/repository
            curl -o ~/.m2/repository/settings.xml -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_TOKEN }} https://nexus.procesar.com.mx/nexus/repository/archivos/settings-2.0.xml
            cat ~/.m2/repository/settings.xml
      

### Inicia construcción y carga de Artefacto generado
      - name: Build artifact
        run: |
           mvn -s ~/.m2/repository/settings.xml clean install -DskipTests=true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPOSITORY_NAME }}-exposicion-${{ env.BRANCH_NAME }}.war
          path: /home/runner/work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}-exposicion/target/*.war
          retention-days: 1

### Termina bloque de construcción y carga de Artefacto generado

  properties:
    needs: build 
    runs-on: self-hosted

    outputs:
         GROUP_OUT: ${{ steps.var_setup.outputs.GROUP_ID }}
         ARTIFACT_OUT: ${{ steps.var_setup.outputs.ARTIFACT_ID }}
         VERSION_OUT: ${{ steps.var_setup.outputs.VERSION }}
         NAME_OUT: ${{ steps.var_setup.outputs.NAME_ID }}
         REPOSITORY_OUT: ${{ steps.var_setup.outputs.REPOSITORY_NAME }}
         
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Crear directorio de descarga
        run: |
          mkdir -p downloaded-artifacts

      - name: read_pom_xml and setting variables
        id: var_setup
        run: |
          # USE GREP TO EXTRACT THE LINE WE NEED. SELECT SECOND OCCURENCE WITH SED. THEN CLEAN HTML TAGS WITH SED
          GROUP_ID_LOCAL=$(grep -m2 "<groupId>" ./pom.xml | sed -n 2p | sed 's/^.<groupId>//' | sed 's/<\/groupId>.$//')
          ARTIFACT_ID_PRE=$(grep -m2 "<artifactId>" ./pom.xml |  sed -n 2p | sed 's/^.<artifactId>//' | sed 's/<\/artifactId>.$//')
          VERSION_LOCAL=$(grep -m2 "<version>" ./pom.xml |  sed -n 2p | sed 's/^.<version>//' | sed 's/<\/version>.$//')
          ARTIFACT_ID_LOCAL="${ARTIFACT_ID_PRE}-exposicion"
          NAME_LOCAL="${ARTIFACT_ID_LOCAL}-${VERSION_LOCAL}.war"
          REPOSITORY_NAME=$(echo "${GITHUB_REPOSITORY}" | sed 's/.*\///')
          
          #se utilizaria cuando haga el pull request approval exclusivamente, caso contrario, debe estar en comentario
          #BRANCH_LOCAL=$(echo "${{ github.event.pull_request.head.ref }}")  
          
          #se utiliza github_ref_name en ejecucion con workflow_dispatch, no usar en build y deploy con pull request
          BRANCH_LOCAL=$(echo "${GITHUB_REF_NAME}")  
          
          echo "GroupID=$GROUP_ID_LOCAL and more"
          echo "ArtifactID=$ARTIFACT_ID_LOCAL and more"
          echo "Version=$VERSION_LOCAL and more"
          echo "Name = $NAME_LOCAL"
          echo "Branch = $BRANCH_LOCAL"
          echo "RepositoryName = $REPOSITORY_NAME"
          
          # SET VARIABLES TO GITHUB_ENVIRONMENT AND OUTPUT
          echo "GROUP_ID=$(echo $GROUP_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "GROUP_ID=$(echo $GROUP_ID_LOCAL)" >> $GITHUB_ENV
          echo "ARTIFACT_ID=$(echo $ARTIFACT_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "ARTIFACT_ID=$(echo $ARTIFACT_ID_LOCAL)" >> $GITHUB_ENV
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_OUTPUT
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_ENV
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_OUTPUT
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_OUTPUT
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_ENV

      - name: Check properties file on runner
        run: |
          cd /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades
          ls -la
          pwd

      ### Inicia bloque para carga de archivo properties y archivo log4j2.xml


      - name: Check secret value (properties)
        id: check_secret
        run: |
          if [[ "${{ secrets.ARCHIVO_PROPERTIES_DEV }}" == "N" ]]; then
            echo "La variable tiene el valor de 'N'. Significa que NO se realizará la copia del archivo. Continua el flujo"
            echo "copia_archivo_properties=false" >> $GITHUB_OUTPUT
            echo "copia_archivo_properties=false" >> $GITHUB_ENV
          else
            echo "Se procede a la copia del archivo Properties"
            echo "copia_archivo_properties=true" >> $GITHUB_OUTPUT
            echo "copia_archivo_properties=true" >> $GITHUB_ENV
          fi

      - name: Install sshpass (properties)
        run: |
          sudo yum install -y sshpass
        if: ${{ env.copia_archivo_properties == 'true' }}

      - name: Update ssh_config and restart SSH (properties)
        run: |
          cat /etc/ssh/ssh_config
          sudo sed -i 's/^.*RhostsRSAAuthentication.*$/# RhostsRSAAuthentication yes/' /etc/ssh/ssh_config
          sudo systemctl restart sshd
          cat /etc/ssh/ssh_config
        if: ${{ env.copia_archivo_properties == 'true' }}          

### Copying in remote server 1

      - name: Copy file properties on remote server 1 (properties)
        run: |
          server1=$(sshpass -p ${{ secrets.AP_PASSWORD_DEV }} ssh ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV1 }} '[ -f ${{ secrets.AP_RUTA_DEV }}/${{ env.REPOSITORY_NAME }}.properties ] && echo "SI" || echo "NO"')
          echo "Resultado_server1: $server1"
          
          
          sshpass -p ${{ secrets.AP_PASSWORD_DEV }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/${{ env.REPOSITORY_NAME }}.properties ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV1 }}:${{ secrets.AP_RUTA_DEV }}
          echo "Archivo properties actualizado exitosamente en servidor 1"
        if: ${{ env.copia_archivo_properties == 'true' }} 

      - name: Copy file log4j2.xml on remote server 1
        run: |
          server1=$(sshpass -p ${{ secrets.AP_PASSWORD_DEV }} ssh ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV1 }} '[ -f ${{ secrets.AP_RUTA_DEV }}/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ] && echo "SI" || echo "NO"')
          echo "Resultado_server1: $server1"
          
          sshpass -p ${{ secrets.AP_PASSWORD_DEV }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV1 }}:${{ secrets.AP_RUTA_DEV }}/log4j2
          echo "Archivo log4j2.xml actualizado exitosamente en servidor 1"
        if: ${{ env.copia_archivo_properties == 'true' }} 


      - name: Copy file properties on remote server 2 (properties)
        run: |
          server1=$(sshpass -p ${{ secrets.AP_PASSWORD_DEV }} ssh ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV2 }} '[ -f ${{ secrets.AP_RUTA_DEV }}/${{ env.REPOSITORY_NAME }}.properties ] && echo "SI" || echo "NO"')
          echo "Resultado_server1: $server2"
          
          sshpass -p ${{ secrets.AP_PASSWORD_DEV }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/${{ env.REPOSITORY_NAME }}.properties ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV2 }}:${{ secrets.AP_RUTA_DEV }}
          echo "Archivo properties actualizado exitosamente en servidor 2"
        if: ${{ env.copia_archivo_properties == 'true' }} 

      - name: Copy file log4j2.xml on remote server 2
        run: |
          server1=$(sshpass -p ${{ secrets.AP_PASSWORD_DEV }} ssh ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV2 }} '[ -f ${{ secrets.AP_RUTA_DEV }}/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ] && echo "SI" || echo "NO"')
          echo "Resultado_server1: $server1"
          
          sshpass -p ${{ secrets.AP_PASSWORD_DEV }} scp /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/propiedades/log4j2/${{ env.REPOSITORY_NAME }}-log4j2.xml ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV2 }}:${{ secrets.AP_RUTA_DEV }}/log4j2
          echo "Archivo log4j2.xml actualizado exitosamente en servidor 2"
        if: ${{ env.copia_archivo_properties == 'true' }} 


### Inicia bloque para carga de artefacto en weblogic
  deploy:
    needs: properties 
    runs-on: self-hosted
    environment: Desarrollo

    outputs:
         GROUP_OUT: ${{ steps.var_setup.outputs.GROUP_ID }}
         ARTIFACT_OUT: ${{ steps.var_setup.outputs.ARTIFACT_ID }}
         VERSION_OUT: ${{ steps.var_setup.outputs.VERSION }}
         NAME_OUT: ${{ steps.var_setup.outputs.NAME_ID }}
         REPOSITORY_OUT: ${{ steps.var_setup.outputs.REPOSITORY_NAME }}

    #ICGJ : Descarga Proyecto              
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Crear directorio de descarga
        run: |
          mkdir -p downloaded-artifacts

      - name: read_pom_xml and setting variables
        id: var_setup
        run: |
          # USE GREP TO EXTRACT THE LINE WE NEED. SELECT SECOND OCCURENCE WITH SED. THEN CLEAN HTML TAGS WITH SED
          GROUP_ID_LOCAL=$(grep -m2 "<groupId>" ./pom.xml | sed -n 2p | sed 's/^.<groupId>//' | sed 's/<\/groupId>.$//')
          ARTIFACT_ID_PRE=$(grep -m2 "<artifactId>" ./pom.xml |  sed -n 2p | sed 's/^.<artifactId>//' | sed 's/<\/artifactId>.$//')
          VERSION_LOCAL=$(grep -m2 "<version>" ./pom.xml |  sed -n 2p | sed 's/^.<version>//' | sed 's/<\/version>.$//')
          ARTIFACT_ID_LOCAL="${ARTIFACT_ID_PRE}-exposicion"
          NAME_LOCAL="${ARTIFACT_ID_LOCAL}-${VERSION_LOCAL}.war"
          REPOSITORY_NAME=$(echo "${GITHUB_REPOSITORY}" | sed 's/.*\///')
          
          #se utilizaria cuando haga el pull request approval exclusivamente, caso contrario, debe estar en comentario
          #BRANCH_LOCAL=$(echo "${{ github.event.pull_request.head.ref }}")  
          
          #se utiliza github_ref_name en ejecucion con workflow_dispatch, no usar en build y deploy con pull request
          BRANCH_LOCAL=$(echo "${GITHUB_REF_NAME}")  
          
          echo "GroupID=$GROUP_ID_LOCAL and more"
          echo "ArtifactID=$ARTIFACT_ID_LOCAL and more"
          echo "Version=$VERSION_LOCAL and more"
          echo "Name = $NAME_LOCAL"
          echo "Branch = $BRANCH_LOCAL"
          echo "RepositoryName = $REPOSITORY_NAME"
          
          # SET VARIABLES TO GITHUB_ENVIRONMENT AND OUTPUT
          echo "GROUP_ID=$(echo $GROUP_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "GROUP_ID=$(echo $GROUP_ID_LOCAL)" >> $GITHUB_ENV
          echo "ARTIFACT_ID=$(echo $ARTIFACT_ID_LOCAL)" >> $GITHUB_OUTPUT
          echo "ARTIFACT_ID=$(echo $ARTIFACT_ID_LOCAL)" >> $GITHUB_ENV
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_OUTPUT
          echo "VERSION=$(echo $VERSION_LOCAL)" >> $GITHUB_ENV
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_OUTPUT
          echo "NAME_ID=$(echo $NAME_LOCAL)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo $BRANCH_LOCAL)" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_OUTPUT
          echo "REPOSITORY_NAME=$(echo $REPOSITORY_NAME)" >> $GITHUB_ENV

      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.REPOSITORY_NAME }}-exposicion-${{ env.BRANCH_NAME }}.war
          path: downloaded-artifacts

      - name: List downloaded artifact, cp artifact w/branch
        run: |
          cd /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/downloaded-artifacts
          ls -la
          cp ${{ env.REPOSITORY_NAME }}-exposicion-1.0.0.war ${{ env.REPOSITORY_NAME }}-exposicion-${{ env.BRANCH_NAME }}.war
          ls -la
          
      - name: Setting Java
        run: |
          echo "JAVA_HOME=/opt/middleware/jvm/jdk-11.0.19" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH, $JAVA_HOME/bin/java weblogic.Server:$PATH" >> $GITHUB_ENV
        shell: bash

      - name: Execute setting environment on remote server 1
        run: |
          OUTPUT=$(sshpass -p ${{ secrets.AP_PASSWORD_DEV }} ssh -o StrictHostKeyChecking=no ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV1 }} '
            # Imprimir el directorio actual
            echo "Directorio actual:";
            pwd;
      
            # Imprimir variables de entorno
            echo "Variables de entorno:";
            env;
      
            # Ejecutar el script
            echo "Ejecutando el script:";
            bash /opt/middleware/oracle/product/WLS14110/wlserver/server/bin/setWLSEnv.sh 2>&1
            #bash ${{ secrets.WEBLOGIC_RUTA_SET_DEV }}/setWLSEnv.sh 2>&1
          ')
          echo "$OUTPUT"

      - name: Execute setting environment on remote server 
        run: |
          OUTPUT=$(sshpass -p ${{ secrets.AP_PASSWORD_DEV }} ssh -o StrictHostKeyChecking=no ${{ secrets.AP_USERNAME_DEV }}@${{ secrets.AP_SERVER_DEV2 }} '
            # Imprimir el directorio actual
            echo "Directorio actual:";
            pwd;
      
            # Imprimir variables de entorno
            echo "Variables de entorno:";
            env;
      
            # Ejecutar el script
            echo "Ejecutando el script:";
            #bash /opt/middleware/oracle/wls14110/wlserver/server/bin/setWLSEnv.sh 2>&1
            bash /opt/middleware/oracle/product/WLS14110/wlserver/server/bin/setWLSEnv.sh 2>&1
            #bash ${{ secrets.WEBLOGIC_RUTA_SET_DEV }}/setWLSEnv.sh 2>&1
          ')
          echo "$OUTPUT"

      
      - name: Checking Artifact exists
        id: artifact-version
        run: |
          set -x
          salida=$(java -cp /opt/middleware/oracle/wls14110/wlserver/server/lib/weblogic.jar weblogic.Deployer \
          -adminurl ${{ secrets.WEBLOGIC_HOST_DEV }} \
          -username ${{ secrets.WEBLOGIC_USERNAME_DEV }} \
          -password ${{ secrets.WEBLOGIC_PASSWORD_DEV }} \
          -listapps | grep "${{ env.REPOSITORY_NAME }}-exposicion*" | sed 's/^$/0/' )

          echo "OUTPUT=$salida" >> $GITHUB_OUTPUT
          echo "OUTPUT=$salida" >> $GITHUB_ENV
          echo "EXIT_CODE=${?}" >> $GITHUB_OUTPUT
          echo "EXIT_CODE=${?}" >> $GITHUB_ENV

      - name: Artifact does not exist desplegado
        id: check-exit
        run: |
            if [[ "${{ env.EXIT_CODE }}" -eq 0 && -z "${{ env.OUTPUT }}" ]]; then
            # este codigo es cuando el artefacto no existe en Weblogic, sube a Nexus con 1.0.0 y despliega (Escenario 1)
              echo "Command executed successfully"
              echo "La aplicación no se encontró, se sube a Nexus con version 1.0.0 y realiza primer deploy a Weblogic Desarrollo "

            echo "Inicia carga de artefacto a Nexus Snapshots" 
              ruta_target="/opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/downloaded-artifacts/"
              cd $ruta_target
              mvn deploy:deploy-file \
                -Dfile=${{ env.REPOSITORY_NAME }}-exposicion-1.0.0.war \
                -DrepositoryId=snapshots \
                -Durl=https://nexus.procesar.com.mx/nexus/repository/maven-snapshots/ \
                -DgroupId=${{ env.REPOSITORY_NAME }} \
                -DartifactId=${{ env.REPOSITORY_NAME }}-exposicion \
                -Dversion=1.0.0-SNAPSHOT \
                -Dpackaging=war \
                -DrepositoryUsername=${{ secrets.NEXUS_USERNAME }} \
                -DrepositoryPassword=${{ secrets.NEXUS_TOKEN }} \
                -s ~/.m2/repository/settings.xml
           
              echo "Inicia despliegue en Weblogic Desarrollo "
              java -cp "/opt/middleware/oracle/wls14110/wlserver/server/lib/weblogic.jar" weblogic.Deployer \
                -adminurl ${{ secrets.WEBLOGIC_HOST_DEV }} \
                -username ${{ secrets.WEBLOGIC_USERNAME_DEV }} \
                -password ${{ secrets.WEBLOGIC_PASSWORD_DEV }} \
                -name ${{ env.REPOSITORY_NAME }}-exposicion-1.0.0 \
                -deploy -targets ${{ secrets.WEBLOGIC_CLUSTER_DEV }} \
                -source /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/downloaded-artifacts/${{ env.REPOSITORY_NAME }}-exposicion-1.0.0.war -upload
                
              
              echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_OUTPUT
              echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_ENV
              echo "Proceso terminado- Deploy con exito Weblogic Desarrollo primera version 1.0.0"
              else
                  # este codigo es cuando el artefacto si existe, pero hay que validar si tiene o no version incluida en el nombre
                  echo "Command failed with exit code ${{ env.EXIT_CODE }}"
                  versionado="${versionado:-"1.0.0"}"
                  echo "Versionado: $versionado"

                  echo "Inicia undeploy del artefacto"
                  java -cp "/opt/middleware/oracle/wls14110/wlserver/server/lib/weblogic.jar" weblogic.Deployer \
                    -adminurl ${{ secrets.WEBLOGIC_HOST_DEV }} \
                    -username ${{ secrets.WEBLOGIC_USERNAME_DEV }} \
                    -password ${{ secrets.WEBLOGIC_PASSWORD_DEV }} \
                    -undeploy -name  ${{ env.REPOSITORY_NAME }}-exposicion-1.0.0 \
                    -targets ${{ secrets.WEBLOGIC_CLUSTER_DEV }}

                  echo "Esperando a que se complete el undeploy del artefacto en nodos del cluster..."
                  sleep 15
                  echo "Inicia despliegue en Weblogic Desarrollo"

                  java -cp "/opt/middleware/oracle/wls14110/wlserver/server/lib/weblogic.jar" weblogic.Deployer \
                   -adminurl ${{ secrets.WEBLOGIC_HOST_DEV }} \
                   -username ${{ secrets.WEBLOGIC_USERNAME_DEV }} \
                   -password ${{ secrets.WEBLOGIC_PASSWORD_DEV }} \
                   -name ${{ env.REPOSITORY_NAME }}-exposicion-1.0.0 \
                   -deploy -targets ${{ secrets.WEBLOGIC_CLUSTER_DEV }} \
                   -source /opt/middleware/actions-runner/_work/${{ env.REPOSITORY_NAME }}/${{ env.REPOSITORY_NAME }}/downloaded-artifacts/${{ env.REPOSITORY_NAME }}-exposicion-1.0.0.war -upload

                  echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_OUTPUT
                  echo "no-ejecutar-siguientes-pasos=true" >> $GITHUB_ENV
                  echo "Proceso terminado- Deploy con exito Weblogic Desarrollo- version 1.0.0"
            fi
